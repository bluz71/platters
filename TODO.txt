- Replace SQLite with Postgres
    - Then add "rack-mini-profiler" gem
    - Convert LIKE query to @@ (see Railscasts episode 343)

- Setup Redis, this will be for fragment cache, sidekiq and rack-attack

- Setup Fragment Cache, use in-memory store (for artists/albums and side-bar):
    - config.cache_store = :memory_store, { size: 64.megabytes }
       prefer Redis
    - http://guides.rubyonrails.org/caching_with_rails.html
    - http://guides.rubyonrails.org/caching_with_rails.html#fragment-caching
    - https://devcenter.heroku.com/articles/caching-strategies#fragment-caching

- Setup Sidekiq for background processing, replace SuckerPunch.
    - Image processing job
    - obsenity filtering job

- Image seeding. Pre-store files directly in Rackspace Cloud Storage and then
  reference them from seeds.rb. See these topics for hints:

    https://groups.google.com/forum/#!topic/carrierwave/csmI0twL_HY
    https://stackoverflow.com/questions/32365121/ror-how-to-seed-an-image-to-my-database-from-a-local-file

- User management, Clearance gem:
    - https://github.com/thoughtbot/clearance
  Clearance provides routing constraints that can be used to control access at
  the routing layer, please use this functionality to only provide admins
  access to Artist/Album add/edit & delete actions.

    https://www.sitepoint.com/simple-rails-authentication-with-clearance/
    http://everydayrails.com/2016/01/23/clearance-rails-authentication.html

- Gems:
    - Faker gem for seed comments (and test users):
        "An Ipsum Lorem paragraph. " << Faker::Lorem.paragraph
        Faker::Company.catch_phrase
        Faker::Company.bs.capitalize
        Faker::Hacker.say_something_smart
        Faker::Hipster.paragraph
        Faker::StarWars.quote

    - local_time gem for comment datestamps (see GoRails ep 31)

    - invisible_captcha gem for user registration (protect against bots)

    - Obscenity gem for profanity filtering.

    - Maildown gem for email views in Markdow format, this eliminates the need
      for separate HTML and TEXT views.

    - rack-attack, rate limiting
        http://www.kickstarter.com/backing-and-hacking/rack-attack-protection-from-abusive-clients
        http://blog.hayleyanderson.us/2015/06/05/using-and-testing-rack-attack-to-improve-the-security-of-your-rails-app/

    - newrelic_rpm, setup New Relic APM Lite account for production monitoring

- Loggly free account and logglier gem (Papertrails centralized logging
  alternative). Also use lograge gem:

    https://www.sitepoint.com/optimizing-ruby-logging-faster-debugging-problem-solving/
    https://www.loggly.com/docs/ruby-logs/
    https://www.loggly.com/docs/send-logs-heroku/
    http://blog.originate.com/blog/2013/07/09/deploying-rails-4-to-heroku/

- Code quality:
    - RuboCop gem for Ruby style guide enforcement
    - Reek gem for code smell detection
    - rails_best_practices
    
    See: https://eewang.github.io/blog/2014/01/18/how-to-smell-check-your-code-quality-in-ruby-and-rails/

- favicon

- DigitalOcean:
    - Setup with GoRails referral for $10 credit: https://www.digitalocean.com/?refcode=87fcb9dab7a3
    - Use Singapore region, it has best performance: http://speedtest-sgp1.digitalocean.com/

- Use Mina for deployment.
    - http://nadarei.co/mina/
    - https://thewebprof.com/switching-from-capistrano-to-mina-for-rails-deployment/
    - https://www.digitalocean.com/community/tutorials/how-to-deploy-with-mina-getting-started

- Deployment:
    - make sure nginx is using Unix Domain Sockets when communicating with
      Puma, this will be much faster than using the default TCP option.
    - nginx rate limiting: limit_conn_zone
    - Tuning nginx: https://www.nginx.com/blog/tuning-nginx/
    - More nginx tips: http://thelazylog.com/useful-nginx-configurations-for-rails-app/
    - Deploying Rails application with Nginx, Puma and Mina: 
        http://thelazylog.com/deploying-rails-application-with-nginx-puma-and-mina/
    - Let's Encrypt SSL: https://scotthelme.co.uk/setting-up-le/
