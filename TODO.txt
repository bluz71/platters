- User management, Clearance gem:

   - name field, client-side "pattern" and server-side "validation", only
     letters, digits and hyphen.
   - Use invisible_capta with User sign up.
   - User sign-up, email address must be confirmed.
   - show page for user (linked to Profile pulldown menu)
   - user show page has edit button
   - user show page has cancel account section section and button
   - Blank email/password in sign-up/log-in should have client-side JS validation
   - Route constraints to Artist/Album add/edit & delete actions.
   - Route constrainst for Sidekiq
   - Add admin field to User model and "admin?" method.
   - User show & edit controller actions (with Friendly ID on username)

   - Specs:
     - Successful sign produces a Flash message
     - Sign up minimum password length (flash)
     - Sign up invalid email
     - Log in wrong email
     - Log in wrong password
     - no comment capability until user email is verified
     - test "account name" sign-up blur for client-side name validity (only
       letters, digits, hyphens)

- Friendly ID lookup failure should generate 404 error codes:

    http://localhost:3000/foo     --> 404 error code in set_artist
    http://localhost:3000/foo/bar --> 404 error code in set_album

- Gems:
    - Faker gem for seed comments (and test users):
        "An Ipsum Lorem paragraph. " << Faker::Lorem.paragraph
        Faker::Company.catch_phrase
        Faker::Company.bs.capitalize
        Faker::Hacker.say_something_smart
        Faker::Hipster.paragraph
        Faker::StarWars.quote

    - local_time gem for comment datestamps (see GoRails ep 31)

    - invisible_captcha gem for user registration (protect against bots)

    - Obscenity gem for profanity filtering.
        do as a background task

    - Maildown gem for email views in Markdow format, this eliminates the need
      for separate HTML and TEXT views.

    - rack-attack, rate limiting
        http://www.kickstarter.com/backing-and-hacking/rack-attack-protection-from-abusive-clients
        http://blog.hayleyanderson.us/2015/06/05/using-and-testing-rack-attack-to-improve-the-security-of-your-rails-app/

    - newrelic_rpm, setup New Relic APM Lite account for production monitoring

- Fix search form magnifying glass issue when zoomed in and out.

- Loggly free account and logglier gem (Papertrails centralized logging
  alternative). Also use lograge gem:

    https://www.sitepoint.com/optimizing-ruby-logging-faster-debugging-problem-solving/
    https://www.loggly.com/docs/ruby-logs/
    https://www.loggly.com/docs/send-logs-heroku/
    http://blog.originate.com/blog/2013/07/09/deploying-rails-4-to-heroku/

- Rollbar error reporting? https://rollbar.com

- Code quality:
    - RuboCop gem for Ruby style guide enforcement
    - Reek gem for code smell detection
    - rails_best_practices
    
    See: https://eewang.github.io/blog/2014/01/18/how-to-smell-check-your-code-quality-in-ruby-and-rails/

- favicon

- DigitalOcean:
    - Setup with GoRails referral for $10 credit: https://www.digitalocean.com/?refcode=87fcb9dab7a3
    - Use Singapore region, it has best performance: http://speedtest-sgp1.digitalocean.com/
    - Setup a 2GB swap file.

- Use Mina for deployment.
    - http://nadarei.co/mina/
    - https://thewebprof.com/switching-from-capistrano-to-mina-for-rails-deployment/
    - https://www.digitalocean.com/community/tutorials/how-to-deploy-with-mina-getting-started

- Deployment:
    - make sure nginx is using Unix Domain Sockets when communicating with
      Puma, this will be much faster than using the default TCP option.
    - nginx rate limiting: limit_conn_zone
    - Tuning nginx: https://www.nginx.com/blog/tuning-nginx/
    - More nginx tips: http://thelazylog.com/useful-nginx-configurations-for-rails-app/
    - Deploying Rails application with Nginx, Puma and Mina: 
        http://thelazylog.com/deploying-rails-application-with-nginx-puma-and-mina/
    - Let's Encrypt SSL: https://scotthelme.co.uk/setting-up-le/
