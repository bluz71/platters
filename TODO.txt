- Genre menu is long, on screens with limited vertical space it scrolls off the
  bottom. Need some type of scrolling or alternative approach. Note, Bootstrap
  itself does not provide scrolling menus. Maybe do this, list the 10 most
  common genres and then list the other genres in a submenu.
    
- NEED some type of Add Genre capability.

- ImageMagick covers.

- Rspec:
    - REST routes for Album
    - All model validations

- Gems:
    - friendly_id for Artist & Album show pages.
        No Artist or Album uses underscores in name/title.
        No Artist or Album uses double hypen in name/title.

        Hence for Artists just replace space with underscore:
          Foo_Bars
        For Albums use Album--Album:
          Foo_Bars--Greatest_Hits

    - teaspoon and jasmine for JS tests (if needed)
    - Ransack for searching
    - Faker gem for seed comments (and test users):
        "An Ipsum Lorem paragraph. " << Faker::Lorem.paragraph
        Faker::Company.catch_phrase
        Faker::Company.bs.capitalize
        Faker::Hacker.say_something_smart
        Faker::Hipster.paragraph
        Faker::StarWars.quote

    - Obscenity gem for profanity filtering.

    - rack-timeout gem to abort requests that take too long

- Code quality:
    - RuboCop gem for Ruby style guide enforcement
    - Reek gem for code smell detection
    - rails_best_practices
    
    See: https://eewang.github.io/blog/2014/01/18/how-to-smell-check-your-code-quality-in-ruby-and-rails/

- Rate limit user creation, user login AND comment postings

- User management, Clearance gem:
    - https://github.com/thoughtbot/clearance

- A|B|C|D button bar should be collapsible.

- Replace SQLite with Postgres
    - Once done then add "rack-mini-profiler" gem
    - Use UUID for primary keys?

- Albums index page filtering:
    - By First Letter (buttons)
    - By Genre (buttons)
    - By exact year (text box?)
    - By decade (button group?)
    - By search
  Use GET url parameters and params hash for filtering, e.g /albums?letter=A&genre=Rock&year=1985

- Artist show page albums list filtering:
    - Newest
    - Oldest
    - Name
    - Length

    This should be a horizontal list via JS "remote:true" similar to:
        https://www.digitalocean.com/community/tutorials/

- Logo should use Capriola font: https://www.google.com/fonts/specimen/Capriola

- Client side model validations:
    - Artist blank name blur should produce an error (via JS)
    - Artist invalid website blur should produce an error
    - Look at all model validations

- Create SpecialPages controller for About, Technologies and Feedback.

- Image gem: CarrierWave
  Change quality: https://github.com/carrierwaveuploader/carrierwave/wiki/how-to:-specify-the-image-quality

- Image storage: Rackspace Cloudfiles or Cloudinary

    https://github.com/cloudinary/cloudinary_gem
    http://cloudinary.com/blog/ruby_on_rails_image_uploads_with_carrierwave_and_cloudinary
    https://devcenter.heroku.com/articles/cloudinary
    https://blog.goodsense.io/2013/06/05/how-i-set-up-cloudinary-to-replace-amazon-s3-for-image-management/

    https://support.cloudinary.com/hc/en-us/articles/202520662-How-can-I-bulk-upload-my-images-

- Image seeding. Pre-store files directly in Cloud Storage and then reference
  them from seeds.rb. See these topics for hints:

    https://groups.google.com/forum/#!topic/carrierwave/csmI0twL_HY
    https://stackoverflow.com/questions/32365121/ror-how-to-seed-an-image-to-my-database-from-a-local-file

- Audit SQL queries, try and cut down on the number of "select *" queries,
  specify needed columns if possible.

- Setup Fragment Cache, use in-memory store:
    - config.cache_store = :memory_store, { size: 64.megabytes }
    - http://guides.rubyonrails.org/caching_with_rails.html
    - http://guides.rubyonrails.org/caching_with_rails.html#fragment-caching
    - https://devcenter.heroku.com/articles/caching-strategies#fragment-caching

- Use Mina for deployment.
    - http://nadarei.co/mina/
    - https://thewebprof.com/switching-from-capistrano-to-mina-for-rails-deployment/
    - https://www.digitalocean.com/community/tutorials/how-to-deploy-with-mina-getting-started

- Deployment:
    - make sure nginx is using Unix Domain Sockets when communicating with
      Puma, this will be much faster than using the default TCP option.
    - More nginx tips: http://thelazylog.com/useful-nginx-configurations-for-rails-app/
    - Deploying Rails application with Nginx, Puma and Mina: 
        http://thelazylog.com/deploying-rails-application-with-nginx-puma-and-mina/
