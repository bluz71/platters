- NEED some type of Add Genre capability.

- ImageMagick covers.

- Rspec:
    - REST routes for Album
    - All model validations

- Gems:
    - Figaro for SECRETS management, clear out secrets.yml and generate a new
      SECRET_KEY_BASE. Run "rake secret". See:
        http://grog.brooksmason.com/rails/4.1/2014/10/24/rails4.1_heroku_figaro.html
    - friendly_id for Artist & Album show pages.
        No Artist or Album uses underscores in name/title.
        No Artist or Album uses double hypen in name/title.

        Hence for Artists just replace space with underscore:
          Foo_Bars
        For Albums use Album--Album:
          Foo_Bars--Greatest_Hits

    - teaspoon and jasmine for JS tests (if needed)
    - Ransack for searching
    - Faker gem for seed comments (and test users):
        "An Ipsum Lorem paragraph. " << Faker::Lorem.paragraph
        Faker::Company.catch_phrase
        Faker::Company.bs.capitalize
        Faker::Hacker.say_something_smart
        Faker::Hipster.paragraph
        Faker::StarWars.quote

    - Obscenity gem for profanity filtering.

- Code quality:
    - RuboCop gem for Ruby style guide enforcement
    - Reek gem for code smell detection
    - rails_best_practices
    
    See: https://eewang.github.io/blog/2014/01/18/how-to-smell-check-your-code-quality-in-ruby-and-rails/

- Rate limit user creation, user login AND comment postings

- User management, Clearance gem:
    - https://github.com/thoughtbot/clearance

- Attachment handling. Evaluate CarrierWave and PaperClip.

- A|B|C|D button bar should be collapsible.

- Replace SQLite with Postgres
    - Once done then add "rack-mini-profiler" gem
    - Use UUID for primary keys?

- Albums index page filtering:
    - By First Letter (buttons)
    - By Genre (buttons)
    - By exact year (text box?)
    - By decade (button group?)
    - By search

- Artist show page albums list filtering:
    - Newest
    - Oldest
    - Name
    - Length

    This should be a horizontal list via JS "remote:true" similar to:
        https://www.digitalocean.com/community/tutorials/

- Website field of Artist should be a full HTTP/HTTPS URL. Do model validation,
  also do client-side JS validation.

- Artist blank name blur should produce and error (via JS)

- Create SpecialPages controller for About, Technologies and Feedback.

- Audit SQL queries, try and cut down on the number of "select *" queries,
  specify needed columns if possible.

- Setup Fragment Cache, use in-memory store:
    - config.cache_store = :memory_store, { size: 64.megabytes }
    - http://guides.rubyonrails.org/caching_with_rails.html
    - http://guides.rubyonrails.org/caching_with_rails.html#fragment-caching
    - https://devcenter.heroku.com/articles/caching-strategies#fragment-caching

- Use Mina for deployment.
    - http://nadarei.co/mina/
    - https://thewebprof.com/switching-from-capistrano-to-mina-for-rails-deployment/
    - https://www.digitalocean.com/community/tutorials/how-to-deploy-with-mina-getting-started

- Deployment:
    - make sure nginx is using Unix Domain Sockets when communicating with
      Puma, this will be much faster than using the default TCP option.
    - More nginx tips: http://thelazylog.com/useful-nginx-configurations-for-rails-app/
    - Deploying Rails application with Nginx, Puma and Mina: 
        http://thelazylog.com/deploying-rails-application-with-nginx-puma-and-mina/
